-- CONNECT_TO_SERVER		... Establish connection to a server, abstracts KAREL library function
--
-- Routine Signature description:
--
-- connection_tag : STRING		... KAREL tag to identify system configuration of the socket
-- socket_file: FILE				... File to handle the open server connection
ROUTINE CONNECT_TO_SERVER(connection_tag : STRING; socket_file: FILE)

VAR
	STATUS: INTEGER
	
BEGIN
	MSG_CONNECT(connection_tag, STATUS)

	OPEN FILE socket_file('RW', connection_tag)
	STATUS = IO_STATUS(socket_file)
	WRITE TPDISPLAY(STATUS)
	
END CONNECT_TO_SERVER


-- DISCONNECT_FROM_SERVER	... Close connection to a server, abstracts KAREL library function
--
-- Routine Signature description:
--
-- connection_tag : STRING		... KAREL tag to identify system configuration of the socket
-- socket_file: FILE				... File to handle the open server connection
ROUTINE DISCONNECT_FROM_SERVER(connection_tag : STRING; socket_file: FILE)

VAR
	STATUS: INTEGER
	
BEGIN
	CLOSE FILE socket_file --close file first, otherwise msg_disco will abort
	MSG_DISCO(connection_tag, STATUS) -- can fail if no current connection, don't catch error
	
END DISCONNECT_FROM_SERVER


-- AWAIT_SOCKET			... Active wait until data is received on this socket connection
--
-- Routine Signature description:
--
-- socket_file: FILE			... File to handle the open server connection
-- pollrate_ms: INTEGER		... Rate in ms at which routine will poll the socket for new data
ROUTINE AWAIT_SOCKET(socket_file: FILE; pollrate_ms: INTEGER)
VAR
n_bytes: INTEGER
STATUS: INTEGER

BEGIN

n_bytes = 0

WHILE (NOT (n_bytes > 0)) DO
	BYTES_AHEAD(socket_file, n_bytes, STATUS)
	WRITE TPDISPLAY('PLL')
	WRITE TPDISPLAY(STATUS)
	DELAY pollrate_ms -- sleep for x  ms
ENDWHILE 
WRITE TPDISPLAY('REC', n_bytes)

END AWAIT_SOCKET
